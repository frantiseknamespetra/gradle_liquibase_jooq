import org.jooq.util.GenerationTool
import org.jooq.util.jaxb.*

group 'com.fna.learning'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'liquibase'

sourceCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath('org.liquibase:liquibase-gradle-plugin:1.2.1')

        classpath('com.h2database:h2:1.3.160')
        classpath('mysql:mysql-connector-java:5.1.37')

        // Jooq libs
        classpath('org.jooq:jooq:3.9.0')
        classpath('org.jooq:jooq-codegen:3.9.0')
        //classpath('org.jooq:jooq-meta:3.9.0')
    }
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile('org.jooq:jooq:3.9.0')
    //compile('org.jooq:jooq-meta:3.9.0')
}


Jdbc jdbc = provideJdbc()
liquibase {
    activities {
        mysql {
            changeLogFile('src/main/resources/db/liquibase/db-changelog-master.xml')
            url(jdbc.url)
            username(jdbc.user)
            password(jdbc.password)
        }
    }
}

task generateJooqDatabaseSource << {

    Configuration configuration = new Configuration()
    configuration.setJdbc(provideJdbc())

    configuration.setGenerator(new Generator())

    configuration.generator.setDatabase(new Database())
    // Name of database is automatically loaded from JDBC connection
    configuration.generator.database.inputSchema = "messaging"

    /*
      The schema that is used in generated source code. This will be the
      production schema. Use this to override your local development
      schema name for source code generation. If not specified, this
      will be the same as the input-schema.
    */
    configuration.generator.database.outputSchema = System.getProperty('db.schema')
    configuration.generator.database.includes = '.*'
    configuration.generator.database.excludes = ''

    configuration.generator.setTarget(new Target())
    configuration.generator.target.packageName = 'com.fna.learning.db'
    configuration.generator.target.directory = "${project.projectDir}/src/main/java"


    configuration.generator.setGenerate(new Generate())
    configuration.generator.generate.fluentSetters = true

    GenerationTool.generate(configuration)
}

Jdbc provideJdbc() {
    Jdbc jdbc = new Jdbc()
    jdbc.setUrl('jdbc:mysql://localhost:3306/messaging')
    jdbc.setUser('root')
    jdbc.setPassword('')
    return jdbc
 }

update.dependsOn = [ processResources, processTestResources ]

generateJooqDatabaseSource.dependsOn = [ update ]

compileJava {
  dependsOn(generateJooqDatabaseSource)
}